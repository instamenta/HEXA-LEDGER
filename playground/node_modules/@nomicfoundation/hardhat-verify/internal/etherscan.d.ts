import type { EthereumProvider } from "hardhat/types";
import type { ChainConfig, ApiKey } from "../types";
export declare class Etherscan {
    apiKey: string;
    apiUrl: string;
    browserUrl: string;
    constructor(apiKey: string, apiUrl: string, browserUrl: string);
    static getCurrentChainConfig(networkName: string, ethereumProvider: EthereumProvider, customChains: ChainConfig[]): Promise<ChainConfig>;
    static fromChainConfig(apiKey: ApiKey | undefined, chainConfig: ChainConfig): Etherscan;
    isVerified(address: string): Promise<boolean>;
    verify(contractAddress: string, sourceCode: string, contractName: string, compilerVersion: string, constructorArguements: string): Promise<EtherscanResponse>;
    getVerificationStatus(guid: string): Promise<EtherscanResponse>;
    getContractUrl(address: string): string;
}
declare class EtherscanResponse {
    readonly status: number;
    readonly message: string;
    constructor(response: any);
    isPending(): boolean;
    isFailure(): boolean;
    isSuccess(): boolean;
    isBytecodeMissingInNetworkError(): boolean;
    isOk(): boolean;
}
export {};
//# sourceMappingURL=etherscan.d.ts.map